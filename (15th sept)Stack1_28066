/*
WAP to insert N Elements into the stack. Find the Middle element , then delete one element from the stack and again find the new middle element
Use integer division to find the mid element Example

let 6 elements are there in stack
5
8
6
4
7
middle element is 6
deleted element is 7 (as it is at top)
new middle element is 8

Input Format

First input : N ,the number of elements in the stack
Second input : accept N elements from the user into the stack

Constraints

N must be nonzero and >=1, if not then display "Invalid number"
second input must be positive integers

Output Format

Dispaly Middle Element
Display The New Midlle Element After Deleting One element From The Stack.

Sample Input 0

5
2 6 8 7 4
Sample Output 0

8
6
Sample Input 1

3
5 8 6
Sample Output 1

8
5
*/

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <stack>
using namespace std;

int main() {
    int N;
    cin >> N;

    if (N <= 0) {
        cout << "Invalid number" << endl;
        return 0;
    }

    stack<int> stk;
    for (int i = 0; i < N; i++) {
        int element;
        cin >> element;
        stk.push(element);
    }

    stack<int> tempStk;
    int mid = N / 2;

    // Find the middle element
    for (int i = 0; i < mid; i++) {
        tempStk.push(stk.top());
        stk.pop();
    }

    int middleElement = stk.top();

    // Restore the stack
    while (!tempStk.empty()) {
        stk.push(tempStk.top());
        tempStk.pop();
    }

    // Delete one element
    stk.pop();

    // Find the new middle element
    mid = stk.size() / 2;
    for (int i = 0; i < mid; i++) {
        tempStk.push(stk.top());
        stk.pop();
    }

    int newMiddleElement = stk.top();

    cout << middleElement << endl;
    cout << newMiddleElement << endl;

    return 0;
}
